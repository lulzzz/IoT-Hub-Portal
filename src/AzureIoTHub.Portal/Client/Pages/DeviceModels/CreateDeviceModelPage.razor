@page "/device-models/new"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.IO
@using AzureIoTHub.Portal.Client.Pages.DeviceModels.LoRaWAN
@using AzureIoTHub.Portal.Shared.Models.V10.DeviceModel
@using AzureIoTHub.Portal.Shared.Models.V10.LoRaWAN.LoRaDeviceModel
@using Blazored.Modal
@using Blazored.Modal.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Newtonsoft.Json

@attribute [Authorize]
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Device Model</MudText>

<EditForm Model="@Model" OnValidSubmit="Save">
    <ObjectGraphDataAnnotationsValidator />
    <MudTabs Elevation="1" Rounded="true" PanelClass="mt-6" @ref="tabs">
        <MudTabPanel Text="General">
            <MudGrid>
                <MudItem xs="12" sm="4" md="2">
                    <MudCard>
                        <MudCardContent>
                            <div class="d-flex justify-center mb-4">
                                <MudAvatar Image="@imageDataUrl" Style="height:100px; width: auto; border-radius: 0; background: transparent " />
                            </div>
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-center">
                            @if (imageDataUrl != null)
                            {
                                <MudButton OnClick="DeleteAvatar" Color="Color.Error">Delete Picture</MudButton>
                            }
                            else
                            {
                                <InputFile id="fileInput" hidden accept=".jpg, .jpeg, .png" OnChange="UploadFiles" />
                                <MudButton HtmlTag="label" for="fileInput" Color="Color.Primary" StartIcon="@Icons.Filled.CloudUpload">Change Picture</MudButton>
                            }
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="8" md="10">
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText>Device model details</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="@Model.Name" For="@(() => Model.Name)" Label="Name" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true" />
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudTextField @bind-Value="@Model.Description" For="@(() => Model.Description)" Label="Description" Variant="Variant.Outlined" Lines="5" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudText>
                                        <b>LoRa Device</b>
                                    </MudText>
                                    <MudSwitch @bind-Checked="IsLoRa" Color="Color.Secondary">
                                        @if (IsLoRa)
                                        {
                                            <MudText Typo="Typo.body2">The device <b>is</b> a LoRa Device.</MudText>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body2">The device <b>is not</b> a LoRa Device.</MudText>
                                        }
                                    </MudSwitch>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                        <MudCardActions Class="pb-4 pl-4">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save Changes</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudTabPanel>
        @if (IsLoRa)
        {
            <MudTabPanel Text="LoRaWAN">
                <MudGrid>
                    <CreateLoraDeviceModel LoRaDeviceModel="@(Model as LoRaDeviceModel)" />
                </MudGrid>
            </MudTabPanel>
        }
    </MudTabs>
</EditForm>

@code {
    private bool isLoRa = false;
    private bool IsLoRa
    {
        get { return this.isLoRa; }
        set
        {
            this.isLoRa = value;
            IsLoRaSelectionChanged(value);
        }
    }

    private string ApiUrlBase => this.IsLoRa ? "/api/lorawan/models" : "api/models";

    protected void IsLoRaSelectionChanged(bool isSelected)
    {
        if (!IsLoRa)
        {
            Model = Model as DeviceModel;
        }
        else
        {
            Model = new LoRaDeviceModel(Model);
        }
    }

    private DeviceModel Model { get; set; } = new DeviceModel
        {
            ModelId = Guid.NewGuid().ToString()
        };

    // Used to manage the picture
    private MultipartFormDataContent content;
    private string imageDataUrl;

    // Used to switch active tab
    private MudTabs tabs;

    private void DeleteAvatar()
    {
        content = null;
        imageDataUrl = null;
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        content = new MultipartFormDataContent();

        var resizedImageFile = await e.File.RequestImageFileAsync(e.File.ContentType, 200, 200);

        var fileContent = new StreamContent(resizedImageFile.OpenReadStream());
        fileContent.Headers.ContentType = new MediaTypeHeaderValue(e.File.ContentType);

        content.Add(content: fileContent,
                      name: "\"file\"",
                      fileName: e.File.Name);

        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream().ReadAsync(buffer);

        imageDataUrl = $"data:{e.File.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }


    private async Task Save()
    {
        HttpResponseMessage result;

        if (IsLoRa)
            result = await httpClient.PostAsJsonAsync(ApiUrlBase, Model as LoRaDeviceModel);
        else
            result = await httpClient.PostAsJsonAsync(ApiUrlBase, Model);

        result.EnsureSuccessStatusCode();

        if (content is not null)
        {
            var response = await httpClient.PostAsync($"{ApiUrlBase}/{Model.ModelId}/avatar", content);
        }

        if (result.IsSuccessStatusCode)
        {
            Snackbar.Add("Device model successfully created.", Severity.Success);

            // Go back to the list of devices
            // NavigationManager.NavigateTo("device-models");
        }
        else if (result.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Snackbar.Add("One or more validation errors occurred", Severity.Error);
            string errorMsg = await result.Content.ReadAsStringAsync();
        }
        else
        {
            Snackbar.Add("Something unexpected occurred", Severity.Warning);
        }
    }
 }